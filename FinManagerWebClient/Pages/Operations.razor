@page "/operations"
@using FinManagerWebClient.DTO.Operation
@using FinManagerWebClient.Components.Operations
@inject IOperationRequests operationRequests
@inject IJSRuntime jsRuntime

<PageTitle>Operations</PageTitle>

<div>
    <table>
        <thead>
            <tr>
                <th>Id</th><th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var o in operations)
            {
                <tr>
                    <td>@o.Id</td>
                    <td>@o.Name</td>
                    <td>
                        <a @onclick="() => EditRow(o)">Изменить</a>
                        <a @onclick="() => RemoveRow(o)">Удалить</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<OperationForm OperationsWereChangedCallback="@LoadOperationsAsync"
               Operation="@operation"
               @bind-SubmitBtnText="submitBtnText"/>

@code {
    OperationVM operation = new OperationVM();
    List<OperationVM> operations = new List<OperationVM>();
    string submitBtnText = "Добавить";

    protected override async Task OnInitializedAsync()
    {
        await LoadOperationsAsync();
        base.OnInitialized();
    }

    void EditRow(OperationVM o)
    {
        operation.Id = o.Id;
        operation.Name = o.Name;

        submitBtnText = "Сохранить";
    }

    async Task RemoveRow(OperationVM o)
    {
        try
        {
            await operationRequests.RemoveAsync(o.Id);
        }
        catch (InvalidOperationException ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
        }

        await LoadOperationsAsync();
    }

    private async Task LoadOperationsAsync()
    {
        operations = await operationRequests.GetAsync();
    }
}
